# Nginx 실행 유저
user  nginx;
# CPU 코어 수에 맞춰 자동으로 worker 프로세스 수 설정
worker_processes  auto;

# 에러 로그 위치
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 로그 형식 정의 (Forwarded 헤더 포함)
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # (중요) 업스트림(Backend) 서버 정의
    # 'server'는 docker-compose.yml에 정의된 Spring Boot 서비스 이름입니다.
    # Docker 내부 DNS가 'server'를 'server' 컨테이너의 IP로 해석해줍니다.
    upstream moup_backend {
        server server:8080;
    }

    # --- 서버 블록 1: HTTP(80) -> HTTPS(443) 강제 리디렉션 ---
    server {
        listen 80;

        # [수정] 여기에 실제 도메인 이름을 적으세요 (예: home.moup-server.com)
        server_name home.moup-server.com;

        # Let's Encrypt 갱신을 위한 경로 (http-01 challenge)
        # docker-compose.yml의 volumes 설정과 맞춰야 합니다.
        location /.well-known/acme-challenge/ {
            # [수정] Certbot 갱신용 웹 루트 경로를 지정하세요. (예: /var/www/certbot)
            root /var/www/certbot; 
        }

        # 나머지 모든 HTTP 요청을 HTTPS로 301 리디렉션
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # --- 서버 블록 2: HTTPS(443) 리버스 프록시 (메인) ---
    server {
        # 'http2' 지시어를 별도로 사용하는 것을 권장 (Nginx 최신 버전)
        listen 443 ssl;
        http2 on; 

        # [수정] 여기에 실제 도메인 이름을 적으세요 (예: home.moup-server.com)
        server_name home.moup-server.com;

        # [확인] SSL 인증서 경로. Certbot 표준 경로입니다.
        # docker-compose.yml에서 '/etc/letsencrypt'가 마운트되었는지 확인하세요.
        ssl_certificate /etc/nginx/ssl/fullchain.pem; # 예시 도메인
        ssl_certificate_key /etc/nginx/ssl/privkey.pem; # 예시 도메인

        # SSL 보안 설정 (권장)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers off; # 클라이언트 Cipher 우선 (HTTP/2 권장)

        # 파일 업로드 용량 제한 (예: 50MB)
        client_max_body_size 50M;

        # 메인 리버스 프록시 설정
        location / {
            # 요청을 'moup_backend'(server:8080)로 전달
            proxy_pass http://moup_backend;

            # (필수) Spring Boot가 클라이언트의 실제 IP와 프로토콜("https")을 알 수 있도록 헤더 설정
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme; # Nginx가 SSL 처리하므로 여기선 "https"가 전달됨

            # WebSocket 지원 (Spring Boot STOMP 등 사용 시)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # 타임아웃 설정 (필요에 따라 조절)
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            proxy_send_timeout 300s;
        }
    }
}

