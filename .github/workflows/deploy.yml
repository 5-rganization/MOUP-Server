name: Deploy to Raspberry Pi (Docker)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to Raspberry Pi via SSH
      run: |
        sshpass -p "${{ secrets.RPI_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p ${{ secrets.RPI_PORT }} ${{ secrets.RPI_USER }}@${{ secrets.RPI_HOST }} << 'EOF'
          set -e
        
          # 1. 프로젝트 디렉터리로 이동
          cd /home/${{ secrets.RPI_USER }}/MOUP-Server
          
          # 2. 최신 코드 받기
          git pull origin main
          
          # 3. .env 파일 생성 (이 로직은 Docker Compose에 완벽합니다!)
          # (기존 .env 생성 스크립트... 그대로 복사)
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "REDIS_HOST=redis" >> .env  # Docker 내부 통신을 위해 'redis'로 변경
          echo "REDIS_PORT=6379" >> .env   # Docker 내부 포트
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          # ... (모든 secrets를 .env에 echo) ...
          
          # 4. (삭제) Native 빌드 및 실행 명령어 제거
          # ./gradlew build -x test  <-- Docker가 빌드하므로 삭제
          # pkill -f 'java.*MOUP'    <-- Docker가 관리하므로 삭제
          # set -a && source .env     <-- Docker가 자동 로드하므로 삭제
          # nohup java -jar ...       <-- Docker가 실행하므로 삭제
          
          # 5. (추가) Docker Compose로 빌드 및 재시작
          echo "Starting Docker Compose deployment..."
          
          # (선택) 베이스 이미지 최신화
          docker-compose pull mysql redis nginx
          
          # 'server' 서비스만 새로 빌드 (캐시 사용 안 함)
          docker-compose build --no-cache server
          
          # 모든 서비스를 띄우되, 'server'만 강제로 다시 생성하여 교체
          # nginx, db, redis는 변경 없으면 그대로 유지됨
          docker-compose up -d --force-recreate server
          
          echo "Deployment complete."
          
          # (선택) 용량 확보를 위해 사용하지 않는 Docker 이미지 정리
          docker image prune -af
          
          # 6. Crontab 설정 (이 로직은 그대로 유지)
          DELETE_SCRIPT="/home/${{ secrets.RPI_USER }}/MOUP-Server/src/main/resources/delete_old_users.sh"
          chmod +x "$DELETE_SCRIPT"
          (crontab -l 2>/dev/null | grep -v "delete_old_users.sh"; echo "0 0 * * * /bin/bash $DELETE_SCRIPT >> /home/${{ secrets.RPI_USER }}/MOUP-Server/delete_old_users.log 2>&1") | crontab -
          echo "Crontab 설정 완료."
          
        EOF