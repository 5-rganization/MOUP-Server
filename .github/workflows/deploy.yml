name: Deploy to Raspberry Pi

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Deploy Spring Boot on Raspberry Pi
      run: |
        sshpass -p "${{ secrets.RPI_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p ${{ secrets.RPI_PORT }} ${{ secrets.RPI_USER }}@${{ secrets.RPI_HOST }} << 'EOF'
          # Navigate to the project directory
          cd /home/${{ secrets.RPI_USER }}/MOUP-Server
          
          # Pull the latest changes
          git pull origin main
          
          # Build the Spring Boot application, skipping tests
          ./gradlew build -x test
          
          # Kill any existing Spring Boot process
          pkill -f 'java.*MOUP' || true
          
          # .env 파일 생성
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "APPLE_CLIENT_ID=${{ secrets.APPLE_CLIENT_ID }}" >> .env
  
          # .env 파일의 환경 변수 로드
          set -a && source .env
          
          # 환경 변수 로드 확인 (선택 사항, 민감 정보 노출 주의)
          # echo "Debug: KEYSTORE_PASSWORD is $KEYSTORE_PASSWORD" 
          # echo "Debug: DATABASE_URL is $DATABASE_URL"
          
          # Run the Spring Boot application in the background, redirecting output to app.log
          nohup java -jar build/libs/MOUP_Server-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod > app.log 2>&1 &
        EOF
