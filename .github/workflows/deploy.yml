name: Build & Deploy (Raspberry Pi, arm64)

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-moup
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push (linux/arm64)
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          platforms: linux/arm64,linux/amd64
          tags: |
            ghcr.io/${{ github.repository_owner }}/moup-server:latest
            ghcr.io/${{ github.repository_owner }}/moup-server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy to Raspberry Pi via SSH
        env:
          RPI_HOST: ${{ secrets.RPI_HOST }}
          RPI_PORT: ${{ secrets.RPI_PORT }}
          RPI_USER: ${{ secrets.RPI_USER }}
          RPI_PASSWORD: ${{ secrets.RPI_PASSWORD }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        run: |
          sshpass -p "$RPI_PASSWORD" ssh -o StrictHostKeyChecking=no -p $RPI_PORT $RPI_USER@$RPI_HOST << 'EOF'
            set -e
            cd /home/$USER/MOUP-Server

            echo "Generating .env..."
            {
              echo "DATABASE_URL=jdbc:mysql://mysql:3306/${{ secrets.DATABASE_NAME }}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul"
              echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}"
              echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}"
              echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}"
              echo "REDIS_HOST=${{ secrets.REDIS_HOST }}"
              echo "REDIS_PORT=${{ secrets.REDIS_PORT }}"
              echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}"
              echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}"
              echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}"
              echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}"
              echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}"
              echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}"
              echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}"
              echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}"
              echo "APPLE_CLIENT_ID=${{ secrets.APPLE_CLIENT_ID }}"
              echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}"
              echo "APPLE_KEY_ID=${{ secrets.APPLE_KEY_ID }}"
              echo "APPLE_PRIVATE_KEY=${{ secrets.APPLE_PRIVATE_KEY }}"
              echo "APPLE_REDIRECT_URI=${{ secrets.APPLE_REDIRECT_URI }}"
              echo "ADMIN_AUTH_TOKEN=${{ secrets.ADMIN_AUTH_TOKEN }}"
              echo "FIREBASE_ACCOUNT_KEY_PATH=${{ secrets.FIREBASE_ACCOUNT_KEY_PATH }}"
              echo "SPRING_PROFILES_ACTIVE=prod"
            } > .env

            echo "Docker login to GHCR..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "Pull & restart..."
            docker compose pull
            docker compose up -d    # --no-build (어차피 build 없음)

            echo "Prune old images..."
            docker image prune -af
          EOF
